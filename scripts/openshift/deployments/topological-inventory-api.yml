apiVersion: v1
kind: Template
metadata:
  name: topological-inventory-api
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: topological-inventory-api
    labels:
      app: topological-inventory
  spec:
    ports:
    - name: topological-inventory-api
      port: 8080
      targetPort: 3000
    selector:
      name: topological-inventory-api
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: topological-inventory-api
    labels:
      app: topological-inventory
  spec:
    replicas: 1
    selector:
      name: topological-inventory-api
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '3000'
          prometheus.io/scrape: 'true'
        name: topological-inventory-api
        labels:
          app: topological-inventory
          name: topological-inventory-api
      spec:
        containers:
        - name: topological-inventory-api
          image: ${IMAGE_NAMESPACE}/topological-inventory-api:latest
          ports:
          - containerPort: 3000
          env:
          - name: APP_NAME
            value: ${APP_NAME}
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: topological-inventory-db
                key: hostname
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: topological-inventory-db
                key: password
          - name: DATABASE_PORT
            value: "5432"
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: topological-inventory-db
                key: username
          - name: PATH_PREFIX
            value: ${PATH_PREFIX}

{% if not deploy_db %}

          - name: PGSSLMODE
            value: verify-full
          - name: PGSSLROOTCERT
            value: /etc/rds-certs/rds-cacert

{% endif %}

          - name: SECRET_KEY_BASE
            valueFrom:
              secretKeyRef:
                name: topological-inventory-api-secrets
                key: secret-key
          - name: ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: topological-inventory-api-secrets
                key: encryption-key
          - name: QUEUE_HOST
            value: ${KAFKA_BOOTSTRAP_HOST}
          - name: QUEUE_PORT
            value: ${KAFKA_BOOTSTRAP_PORT}
          readinessProbe:
            tcpSocket:
              port: 3000
          resources:
            limits:
              cpu: 200m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 500Mi

{% if not deploy_db %}

          volumeMounts:
          - name: rds-client-ca
            mountPath: /etc/rds-certs
            readOnly: true
        volumes:
        - name: rds-client-ca
          secret:
            secretName: rds-client-ca

{% endif %}

    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - topological-inventory-api
          from:
            kind: ImageStreamTag
            name: topological-inventory-api:latest
            namespace: ${IMAGE_NAMESPACE}
parameters:
- name: APP_NAME
  displayName: Application Name
  description: Application name to be used in request paths. Only used when PATH_PREFIX is also specified.
  value: topological-inventory
- name: IMAGE_NAMESPACE
  displayName: Image Namespace
  description: Namespace which contains the image stream to pull from
  value: buildfactory
- name: PATH_PREFIX
  displayName: Path Prefix
  description: Base path for the API
- name: KAFKA_BOOTSTRAP_HOST
  displayName: Message Queue Hostname
  description: Hostname which will be used to contact the message queue.
  value: mq-kafka
- name: KAFKA_BOOTSTRAP_PORT
  displayName: Message Queue Port
  description: Port which will be used to contact the message queue.
  value: "29092"
